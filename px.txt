#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

void swap(int arr[], int i, int j){
	int cur = arr[i];
	arr[i] = arr[j];
	arr[j] = cur;
}

// 堆排序
void heapify(int tree[], int len, int i){
	if (i >= len){
		return;
	}
	int c1 = 2 * i + 1;
	int c2 = 2 * i + 2;
	int max = i;
	if (c1 < len && tree[c1] > tree[max]){
		max = c1;
	}
	if (c2 < len && tree[c2] > tree[max]){
		max = c2;
	}
	if (i != max){
		swap(tree, i, max);
		heapify(tree, len, max);
	}
}
void buildHeap(int tree[], int len){
	int last_node = len - 1;
	int parent = (last_node - 1) / 2;
	for (int i = parent; i >= 0; i--){
		heapify(tree, len, i);
	}
}
void heapSort(int tree[], int len){
	buildHeap(tree, len);
	for (int i = len - 1; i >= 0; i--){
		swap(tree, i, 0);
		heapify(tree, i, 0);
	}
}
void print(int arr[] , int len){
	for (int i = 0; i < len;i++){
		printf("%d ",arr[i]);
	}
	printf("\n");
}
#define MAX 432
#define LEN 13

// 快速排序
int piv(int arr[],int l,int h){
	int cur = arr[l];
	while ( l < h){
		while ( l < h && cur<=arr[h]){
			h--;
		}
		arr[l] = arr[h];
		while ( l < h &&  cur > arr[l]){
			l++;
		}
		arr[h] = arr[l];
	}
	arr[l] = cur;
	return l;
}
void pivsort(int arr[] , int l , int h){
	if ( l < h){
		int m = piv(arr,l,h);
		pivsort(arr, l, m - 1);
		pivsort(arr, m+1,h);
	}
}
void QSort(int arr[] , int len){
	pivsort( arr , 0 ,len-1);
}

// 归并排序
void merge(int arr[] , int l,int m , int r){
	int len = r - l + 1;
	int* newArr = (int*)malloc(sizeof(int)*len);
	int k = 0;
	int left = l;
	int right = m+1;
	while ( left <= m && right<=r){
		if (arr[left] < arr[right]){
			newArr[k++] = arr[left++];
		}
		else{
			newArr[k++] = arr[right++];
		}
	}
	while ( left<=m){
		newArr[k++] = arr[left++];
	}
	while (right<=r){
		newArr[k++] = arr[right++];
	}
	memcpy(arr+l,newArr,sizeof(int)*len);
	free(newArr);
	newArr = NULL;
}

void chaifen(int arr[] , int l , int r){
	if ( l == r){
		return;
	}
	int m = l + (r - l) / 2;
	chaifen(arr, l, m);
	chaifen(arr, m+1,r);
	merge(arr,l,m,r);
}
void MERGESORT(int arr[] , int len){
	chaifen(arr,0,len-1);
}

// 插入排序
void insert(int arr[] , int len){
	for (int i = 1; i < len;i++){
		if (arr[i] < arr[i-1]){
			int  j = 0;
			int cur = arr[i];
			for (j = i - 1; j >= 0 && cur < arr[j];j--){
				arr[j + 1] = arr[j];
			}
			arr[j + 1] = cur;
		}
	}
}

// 希尔排序
void shell(int arr[] , int len){
	int step = len / 2;
	while (step >= 1){
		for (int i = step; i < len;i++){
			for (int j = 1; j < len;j++){
				if (arr[j] < arr[j-1]){
					int  k = 0;
					int cur = arr[j];
					for (k = j - step; k >= 0 && cur < arr[k];k-=step){
						arr[k + step] = arr[k];
					}
					arr[k + step] = cur;
				}
			}
		}
		step /= 2;
	}
}

// 基数排序
void radix(int arr[] , int len){

	int tmp[MAX+1];
	memset(tmp,0,sizeof(int)*(MAX+1));
	for (int i = 0; i < len;i++){
		tmp[arr[i]]++;
	}
	for (int i = 0; i < MAX + 1;i++){
		while (tmp[i]--){
			printf("%d ",i);
		}
	}
	printf("\n");
}

// 桶排序
void bucketSort(int arr[] , int len){
	for (int i = 1; i < MAX;i*=10){
		int tmp[10][LEN];
		memset(tmp,-1,sizeof(int)*LEN*10);

		// 入桶
		for (int j = 0; j < len;j++){
			int m = arr[j] / i % 10;
			tmp[m][j] = arr[j];
		}

		// 出桶
		int k = 0;
		for (int i = 0; i < 10;i++){
			for (int j = 0; j < LEN;j++){
				if ( -1 !=  tmp[i][j]){
					arr[k++] = tmp[i][j];
				}
			}
		}
	}
}

// 选择排序
void select(int arr[] , int len){
	for (int i = 0; i < len;i++){
		int min = arr[i];
		int flag = -1;
		for (int j = i + 1; j < len;j++){
			if ( min > arr[j]){
				min = arr[j];
				flag = j;
			}
		}
		if (flag >= 0){
			swap( arr,i,flag);

		}
	}
}

int cmp(int arr[],int i,int j){
	return arr[i]>arr[j] ? 1: 0;
}
//冒泡排序
void bubble(int arr[]  , int len){
	for (int i = 0; i < len - 1;i++){
		for (int j = 0; j < len - i - 1;j++){
			if (cmp(arr,j+1,j)){
				swap(arr,j+1,j);
			}
		}
	}
}
int main(){

	int arr[] = {213,0,45,17,10,84,20,39,81,287,432,70,16};
	int len = sizeof(arr) / sizeof(arr[0]);
	bubble(arr, len);
	print(arr,len);
	system("pause");
	return 0;
}
// 栈和队列
// 栈：后进先出的线性表
	//实现：
	// 1、顺序表 pushBack popBack
	// 2、单链表 pushFront popFront
// 队列：先进先出的线性表
//	实现：
		// 1、单链表加尾指针：pushBack popFront
		// 2、顺序表：pushBack popFront(O(n)),一般不用顺序表

// 循环队列：元素个数固定，固定大小顺序表
// front rear(队尾下一个位置) size
//int main(){
//
//
//	system("pause");
//	return 0;
//}